# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [aarch64, x86_64]
        include:
          - os: ubuntu-latest
            triple: unknown-linux-gnu
          - os: windows-latest
            triple: pc-windows-msvc
          - os: macos-latest
            triple: apple-darwin
    steps:
    - uses: actions/checkout@v3.0.0
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
        target: "${{ matrix.arch }}-${{ matrix.triple }}"
        override: true
    - name: Rust Cache
      uses: Swatinem/rust-cache@v1.3.0
      with:
        working-directory: "./native/"
    - name: Set up JDK 11
      uses: actions/setup-java@v3.1.0
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Test with Gradle
      uses: gradle/gradle-build-action@v2.1.5
    - name: Run gradle test with XVFB
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run --auto-servernum gradle test --info
    - name: Run gradle test
      if: matrix.os != 'ubuntu-latest'
      run: gradle test --info
    - run: cd native && cargo clean
    - name: Build lib
      uses: marcopolo/cargo@master
      with:
        # Cargo command to run (ex. `check` or `build`)
        command: build
        args: --target "${{ matrix.arch }}-${{ matrix.triple }}" --release
        use-cross: true
        working-directory: native
    - name: Rename to arch type
      shell: bash #prepare for bashing syntaxing
      run: |
        cd "native/target/${{ matrix.arch }}-${{ matrix.triple }}/release"
        ls
        for f in *arboard_java.*; do mv -f "$f" "${{ matrix.arch }}_$f"; done
    - name: Upload library
      uses: actions/upload-artifact@v3.0.0
      with:
        name: "${{ matrix.arch }}-${{ matrix.triple }}"
        path: "./native/target/${{ matrix.arch }}-${{ matrix.triple }}/release"

  jar:
    
    runs-on: ubuntu-latest
    needs: build
    environment: OSSRH_USERNAME
    steps:
    - uses: actions/checkout@v3.0.0
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
    - name: Rust Cache
      uses: Swatinem/rust-cache@v1.3.0
      with:
        working-directory: "./native/"
    - run: cargo install cross
    - name: Set up JDK 11
      uses: actions/setup-java@v3.1.0
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Download all build artifacts
      uses: actions/download-artifact@v3.0.0
      with:
        path: ./lib/src/main/resources/natives/
    - run: |
        cd ./lib/src/main/resources/natives
        ls ./
        find . -type f -mindepth 2 -maxdepth 3 -exec mv -i -n -- {} . \;
        find . -depth -maxdepth 1 -type d -exec rm -r {} \;
        find . -type f ! -name '*arboard_java.*' -delete && echo after
        ls ./
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.1.5
      with:
        arguments: jar --info
    - run: gradle sourceJar
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        path: ./lib/build/libs/
    - name: Publish to MavenCentral Provision
      if: github.event_name == 'push'
      run: gradle publishReleasePublicationToSonatypeRepository --max-workers 1
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
    
    
