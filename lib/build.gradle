/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // https://mvnrepository.com/artifact/com.github.ramanrajarathinam/native-utils
    implementation group: 'com.github.ramanrajarathinam', name: 'native-utils', version: '1.0.0'
}

javadoc {
    source = sourceSets.main.allJava
    options.addBooleanOption('html5', true)
}

ext {
    PUBLISH_GROUP_ID = 'io.github.imurx'
    PUBLISH_VERSION = '1.0.2'
    PUBLISH_ARTIFACT_ID = 'arboard'
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

tasks.named("processResources") {
    dependsOn "copyJNITest"
}

tasks.register("copyJNITest", Copy) {
    dependsOn "compileJNITest"
    enabled = gradle.startParameter.getTaskNames().contains("test")
    from("../native/target/debug")
    into layout.buildDirectory.dir("resources/main/natives/")
    include "*.so"
    include "*.dll"
    include "*.dylib"
}

tasks.register("compileJNITest", Exec) {
    enabled = gradle.startParameter.getTaskNames().contains("test")
    workingDir "../native"
    commandLine "cargo", "build"
}

tasks.register("compileJNILinux", Exec) {
    enabled = !gradle.startParameter.getTaskNames().contains("test")
    workingDir "../native"
    commandLine "cross", "build", "--release", "--target", "x86_64-unknown-linux-gnu"
}

tasks.register("compileJNIDarwin", Exec) {
    enabled = !gradle.startParameter.getTaskNames().contains("test")
    workingDir "../native"
    commandLine "cross", "build", "--release", "--target", "x86_64-apple-darwin"
}

tasks.register("compileJNIWin", Exec) {
    enabled = !gradle.startParameter.getTaskNames().contains("test")
    workingDir "../native"
    commandLine "cross", "build", "--release", "--target", "x86_64-pc-windows-gnu"
}
